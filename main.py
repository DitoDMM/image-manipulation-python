# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap
import cv2
import imutils
import numpy as np


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(550, 550)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.uploadButton1 = QtWidgets.QPushButton(self.centralwidget)
        self.uploadButton1.setGeometry(QtCore.QRect(30, 80, 91, 31))
        self.uploadButton1.setObjectName("uploadButton1")
        self.uploadLabel1 = QtWidgets.QLabel(self.centralwidget)
        self.uploadLabel1.setGeometry(QtCore.QRect(30, 110, 231, 21))
        self.uploadLabel1.setObjectName("uploadLabel1")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(90, 0, 351, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.imageLabel1 = QtWidgets.QLabel(self.centralwidget)
        self.imageLabel1.setGeometry(QtCore.QRect(30, 150, 200, 200))
        self.imageLabel1.setObjectName("imageLabel1")
        self.contrastButton = QtWidgets.QPushButton(self.centralwidget)
        self.contrastButton.setGeometry(QtCore.QRect(80, 370, 81, 61))
        self.contrastButton.setObjectName("contrastButton")
        self.invertButton = QtWidgets.QPushButton(self.centralwidget)
        self.invertButton.setGeometry(QtCore.QRect(280, 370, 81, 61))
        self.invertButton.setObjectName("invertButton")
        self.substractionButton = QtWidgets.QPushButton(self.centralwidget)
        self.substractionButton.setGeometry(QtCore.QRect(180, 370, 81, 61))
        self.substractionButton.setObjectName("substractionButton")
        self.imageLabel2 = QtWidgets.QLabel(self.centralwidget)
        self.imageLabel2.setGeometry(QtCore.QRect(300, 150, 200, 200))
        self.imageLabel2.setObjectName("imageLabel2")
        self.uploadLabel2 = QtWidgets.QLabel(self.centralwidget)
        self.uploadLabel2.setGeometry(QtCore.QRect(300, 110, 231, 21))
        self.uploadLabel2.setObjectName("uploadLabel2")
        self.uploadButton2 = QtWidgets.QPushButton(self.centralwidget)
        self.uploadButton2.setGeometry(QtCore.QRect(300, 80, 91, 31))
        self.uploadButton2.setObjectName("uploadButton2")
        self.thresholdButton = QtWidgets.QPushButton(self.centralwidget)
        self.thresholdButton.setGeometry(QtCore.QRect(380, 370, 81, 61))
        self.thresholdButton.setObjectName("thresholdButton")
        self.logtransformButton = QtWidgets.QPushButton(self.centralwidget)
        self.logtransformButton.setGeometry(QtCore.QRect(80, 440, 81, 61))
        self.logtransformButton.setObjectName("logtransformButton")
        self.gammaButton = QtWidgets.QPushButton(self.centralwidget)
        self.gammaButton.setGeometry(QtCore.QRect(380, 440, 81, 61))
        self.gammaButton.setObjectName("gammaButton")
        self.exptransformButton = QtWidgets.QPushButton(self.centralwidget)
        self.exptransformButton.setGeometry(QtCore.QRect(180, 440, 81, 61))
        self.exptransformButton.setObjectName("exptransformButton")
        self.powtransformButton = QtWidgets.QPushButton(self.centralwidget)
        self.powtransformButton.setGeometry(QtCore.QRect(280, 440, 81, 61))
        self.powtransformButton.setObjectName("powtransformButton")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(100, 40, 321, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 550, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.uploadButton1.clicked.connect(self.open_dialog_box_1)
        self.uploadButton2.clicked.connect(self.open_dialog_box_2)
        self.contrastButton.clicked.connect(self.contrast_adjustment)
        self.substractionButton.clicked.connect(self.image_substraction)
        self.invertButton.clicked.connect(self.invert_image)
        self.thresholdButton.clicked.connect(self.threshold_image)
        self.logtransformButton.clicked.connect(self.logarithmic_transform)
        self.exptransformButton.clicked.connect(self.exponential_transform)
        self.powtransformButton.clicked.connect(self.powerlaw_transform)
        self.gammaButton.clicked.connect(self.gamma_correction)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.uploadButton1.setText(_translate("MainWindow", "Buka Foto 1"))
        self.uploadLabel1.setText(_translate("MainWindow", "Path Foto 1"))
        self.label.setText(_translate("MainWindow", "APLIKASI CITRA DIGITAL MANIPULASI FOTO"))
        self.imageLabel1.setText(_translate("MainWindow", "FOTO 1"))
        self.contrastButton.setText(_translate("MainWindow", "Contrast\n"
"Adjustment"))
        self.invertButton.setText(_translate("MainWindow", "Invert\n"
"Image"))
        self.substractionButton.setText(_translate("MainWindow", "Image\n"
"Subtraction"))
        self.imageLabel2.setText(_translate("MainWindow", "FOTO 2"))
        self.uploadLabel2.setText(_translate("MainWindow", "Path Foto 2"))
        self.uploadButton2.setText(_translate("MainWindow", "Buka Foto 2"))
        self.thresholdButton.setText(_translate("MainWindow", "Threshold\n"
"Image"))
        self.logtransformButton.setText(_translate("MainWindow", "Logarithmic\n"
"Transform"))
        self.gammaButton.setText(_translate("MainWindow", "Gamma\n"
"Correction"))
        self.exptransformButton.setText(_translate("MainWindow", "Exponential\n"
"Transform"))
        self.powtransformButton.setText(_translate("MainWindow", "Power-Law\n"
"Transform"))
        self.label_2.setText(_translate("MainWindow", "Nama : Rifqi Dwiyana Firmandito   |   NIM : 201851140"))

    def open_dialog_box_1(self):
        global path1
        filename = QFileDialog.getOpenFileName()
        path1 = filename[0]
        self.uploadLabel1.setText(path1)
        pixmap = QPixmap(path1)
        pixmap2 = pixmap.scaled(200,200)
        self.imageLabel1.setPixmap(pixmap2)

    def open_dialog_box_2(self):
        global path2
        filename = QFileDialog.getOpenFileName()
        path2 = filename[0]
        self.uploadLabel2.setText(path2)
        pixmap = QPixmap(path2)
        pixmap2 = pixmap.scaled(200,200)
        self.imageLabel2.setPixmap(pixmap2)

    def contrast_adjustment(self):
        image = cv2.imread(path1)
        image = imutils.resize(image, width = 400)
        alpha = 2.0 # Contrast control (1.0-3.0)
        beta = 0 # Brightness control (0-100)
        adjusted = cv2.convertScaleAbs(image, alpha=alpha, beta=beta)
        cv2.imshow('Original Image', image)
        cv2.imshow('Adjusted Contrast Image', adjusted)
        cv2.waitKey(0)

    def image_substraction(self):
        image1 = cv2.imread(path1)
        image1 = imutils.resize(image1, width = 400)
        image2 = cv2.imread(path2)
        image2 = imutils.resize(image2, width = 400)
        image3 = cv2.subtract(image1,image2)
        cv2.imshow('Subtraction Result', image3)

    def invert_image(self):
        image = cv2.imread(path1)
        image = imutils.resize(image, width = 400)
        invert = cv2.bitwise_not(image)
        cv2.imshow('Original Image', image)
        cv2.imshow('Inverted Image', invert)
        cv2.waitKey(0)

    def threshold_image(self):
        image = cv2.imread(path1)
        image = imutils.resize(image, width = 400)
        img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        ret, thresh = cv2.threshold(img, 120, 255, cv2.THRESH_BINARY)
        cv2.imshow('Original Image', image)
        cv2.imshow('Threshold Image', thresh)
        cv2.waitKey(0)

    def logarithmic_transform(self):
        image = cv2.imread(path1)
        image = imutils.resize(image, width = 400)
        log_image_1 = 2 * (np.log(image + 1))
        log_image_1 = np.array(log_image_1, dtype = np.uint8)
        log_image_2 = 3 * (np.log(image + 1))
        log_image_2 = np.array(log_image_2, dtype = np.uint8)
        log_image_3 = 5 * (np.log(image + 1))
        log_image_3 = np.array(log_image_3, dtype = np.uint8)
        cv2.imshow('Original Image', image)
        cv2.imshow('Logarithmic Transform 1', log_image_1)
        cv2.imshow('Logarithmic Transform 2', log_image_2)
        cv2.imshow('Logarithmic Transform 3', log_image_3)
        cv2.waitKey(0)

    def exponential_transform(self):
        image = cv2.imread(path1)
        image = imutils.resize(image, width = 400)
        output1 = 4 * (((1 + 0.3) ** (image)) - 1)
        output1 = np.array(output1, dtype = np.uint8)
        output2 = 4 * (((1 + 0.4) ** (image)) - 1)
        output2 = np.array(output1, dtype = np.uint8)
        output3 = 4 * (((1 + 0.6) ** (image)) - 1)
        output3 = np.array(output1, dtype = np.uint8)
        cv2.imshow('Original Image', image)
        cv2.imshow('Exponential Transform 1', output1)
        cv2.imshow('Exponential Transform 2', output2)
        cv2.imshow('Exponential Transform 3', output3)
        cv2.waitKey(0)

    def powerlaw_transform(self):
        def adjust_gamma(image, gamma=1.0):
            invGamma = 1.0 / gamma
            table = np.array([((i / 255.0) ** invGamma) * 255
                for i in np.arange(0, 256)]).astype("uint8")
            return cv2.LUT(image, table)

        image = cv2.imread(path1)
        image = imutils.resize(image, width = 400)
        adjusted1 = adjust_gamma(image, gamma=0.5)
        adjusted2 = adjust_gamma(image, gamma=1.5)
        adjusted3 = adjust_gamma(image, gamma=3.0)
        cv2.imshow('Original Image', image)
        cv2.imshow('Power-Law (Gamma) Transform 1', adjusted1)
        cv2.imshow('Power-Law (Gamma) Transform 2', adjusted2)
        cv2.imshow('Power-Law (Gamma) Transform 3', adjusted3)
        cv2.waitKey(0)

    def gamma_correction(self):
        def adjust_gamma(image, gamma=1.0):
            invGamma = 1.0 / gamma
            table = np.array([((i / 255.0) ** invGamma) * 255
                for i in np.arange(0, 256)]).astype("uint8")
            return cv2.LUT(image, table)

        image = cv2.imread(path1)
        image = imutils.resize(image, width = 400)
        adjusted = adjust_gamma(image, gamma=3.0)
        cv2.imshow('Original Image', image)
        cv2.imshow('Gamma Correction Result', adjusted)
        cv2.waitKey(0)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
